package SimpleExample.client;

import java.util.LinkedList;

import SimpleExample.common.Configuration;
import SimpleExample.common.ImageBufferElement;

public class ClientAudioBuffer {
	private LinkedList<byte[]> buffer;
	private boolean closed;
	
	public ClientAudioBuffer() {
		this.buffer = new LinkedList<byte[]>();
		this.closed = false;
	}

	public synchronized void addSample(byte[] sample) {
		buffer.add(sample);
		notifyAll();
	}

	public synchronized byte[] getSample() {
		while (buffer.isEmpty()) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return buffer.poll();
	}

	public synchronized int getSize() {
		return buffer.size();
	}

	public synchronized boolean moreToShow() {
		while (!allFramesSent && buffer.isEmpty()) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return !allFramesSent || !buffer.isEmpty();
	}

	public synchronized void setAllFramesSent(boolean allFramesSent) {
		this.allFramesSent = allFramesSent;
		notifyAll();
	}

	public synchronized void setPlayNotPause(boolean playNotPause) {
		this.playNotPause = playNotPause;
		notifyAll();
	}

	public synchronized void waitForPlay() {
		while (!playNotPause) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public synchronized boolean isPlaying() {
		return playNotPause;
	}

	public synchronized void setMovieList(String[] movieList) {
		this.movieList = movieList;
		notifyAll();
	}

	public synchronized String[] getMovieList() {
		while (movieList == null) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return movieList;
	}
}
